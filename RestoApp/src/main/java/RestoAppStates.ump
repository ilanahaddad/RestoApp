class Table  
{  
  states  
  {  
    Available 
    {  
      setTableInUse(Table table)  -> InUse;
    }  

     InUse 
     {
	   ReadyToOrder 
	   {
	     addOrderItem(Seat seat, OrderItem itemToOrder) / {
	     	if(seat.numberOfOrderItems()==0){ 
	     		setSeatInUse(seat);
	     	} 
	     } -> ReadyToOrder;
	     cancelOrderItem(Seat seat, OrderItem itemToCancel) / {
	     	if(seat.numberOfOrderItems()==1){
	     		setSeatAvailable();
	     	}
	     } -> ReadyToOrder;
	     freeTableAndSeats(Table table, Order order) [order.numberOfOrderItems()==0] -> Available;
	     createBill(List<Seat> seats) -> IssuedBill;
	   }
    	   IssuedBill 
	   {
	     freeTableAndSeats(Table table, Order order) /{
	     	if(order.numberOfOrderItems() == numBillsForTable(table)){
	     		return false;
	     	}
	     } -> Available; 
	     createBill(List<Seat> seats) [eachSeatHasNoExistingBill(seats)] -> IssuedBill;
	     addSeatToExistingBill(Seat seat, Bill bill) [seatHasNoExistingBill(seat)] -> IssuedBill;
	     cancelBill(Table table, Bill billToCancel) [numBillsForTable(table) > 1]-> IssuedBill;
		 cancelBill(Table table, Bill billToCancel) [numBillsForTable(table) == 1]-> ReadyToOrder;
		 addOrderItem(Seat seat, OrderItem itemToOrder) [seatHasNoExistingBill(seat)] / {
	     	if(seat.numberOfOrderItems()==0){ 
	     		setSeatInUse(seat);
	     	} 
	     } -> IssuedBill;
	    	 cancelOrderItem(Seat seat, OrderItem itemToCancel) [seatHasNoExistingBill(seat)] / {
	     	if(seat.numberOfOrderItems()==1){
	     		setSeatAvailable();
	     	}
	     } -> IssuedBill;
       }
     }
    
  }
  private boolean allItemsOrderedWereBilled(Table table,Order order){ 
  
    		int numberOfOrderedItemsForTable = order.numberOfOrderItems();
    		int numberOfBillsForTable= numBillsForTable(table); 
      	return numberOfBillsForTable == numberOfOrderedItemsForTable;
    }
  private int numBillsForTable(Table table){
  	List<Seat> currSeats = table.getCurrentSeats();
	int numBillsForTable = 0;
	for(Seat s: currSeats) { //for every current seat at that table
		if(s.numberOfBills() >0) { 
			numBillsForTable ++; //add up bills per seat if any
		}
	}
	return numBillsForTable;
  }
  private boolean eachSeatHasNoExistingBill(List<Seat> seatsToBill){
  	int result = 0;
  	for(Seat s: seatsToBill){
  		if(!seatHasNoExistingBill(s)){
  			result++;
  		}
  	}
  	return result==0; 
  			
  }
  private boolean seatHasNoExistingBill(Seat seat){
  //implement this is iteration 5
  	return false;
  }

  private boolean setSeatInUse(Seat seat){
  //TODO: implement this in iteration 5
  	return false;
  }  
  private boolean setSeatAvailable(){
  //TODO: implement this in iteration 5
  	return false;
  }

}  