class Table  
{  
  states  
  {  
    Available 
    {  
      reserveTable (tableNum, numSeats) [hasEnoughSeats(tableNum, numSeatsRequired)]  -> Reserved;
      useTable (tableNum, numSeats) [hasEnoughSeats(tableNum, numSeatsRequired)] -> InUse;
    }  
    
    Unavailable 
    {
      Reserved 
      {
        useTable (tableNum, numSeats) [hasEnoughSeats(tableNum, numSeatsRequired)] -> InUse;
        cancelReservation (tableNum) -> Available;
      }

      InUse 
      {
        WaitingForOrder
        {
          orderItems (orderedItems) -> WaitingForFood;
          freeTable (tableNum) -> 
        }
        WaitingForFood 
        {
          orderItems (orderedItems) -> WaitingForFood;
          orderBill (tableNum) -> IssuedBill;
          cancelItems (canceledItems) [!hasMoreItems] -> WaitingForOrder;
          cancelItems (canceledItems) [hasMoreItems] -> WaitingForFood;
        }
        
        IssuedBill 
        {
          freeTable (tableNum) -> Available;
          //orderFood (orderedItems)  /{ deleteBill(); }  -> WaitingForFood;
          orderFood (orderedItems) -> WaitingForFood;
        }
      }
    }
  }
  private boolean hasEnoughSeats(int tableNum, int numSeatsRequired){
  	Table table = null;
    try { table = getTableByNum(tableNum); }
    catch (InvalidInputException err) { return false; }
        
    return (table.getCurrentSeats().size() >= numSeatsRequired);
  }  
}  