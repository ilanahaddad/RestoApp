external RestoController {}
external InvalidInputException {}
class Table  
{  
	depend ca.mcgill.ecse223.resto.controller.RestoController;
	depend ca.mcgill.ecse223.resto.controller.InvalidInputException;
  states  
  {  
    Available 
    {  
      createReservation(Table table, int numSeatsRequested, Date resTime, String contactName, String contactEmail, 
       	String contactPhone) [table.getCurrentSeats().size() >= numSeatsRequested] -> /{
       		List<Reservation> allRes = table.getReservations();
    			for(Reservation res: allRes) {
    				if(res.getDateTime()==resTime) {
    					return false;
    				}
    			}
       } Available;
      cancelReservation(Table table, Date resTime) -> Available;
      createOrder(Table table, int numSeatsNeeded) [table.getCurrentSeats().size() >= numSeatsNeeded] -> InUse;
    }  

     InUse 
     {
	   ReadyToOrder 
	   {
	     addToOrder(Seat seat, OrderItem itemToOrder) / { setSeatInUse(seat); } -> ReadyToOrder;
	     cancelItem(Seat seat, OrderItem itemToCancel) / {
	     	if(seat.getOrderItems().size()==1){
	     		setSeatAvailable();
	     	}
	     } -> ReadyToOrder;
	     freeTableAndSeats(Table table, Order order) [order.getOrderItems().size()==0] -> Available;
	     createBill(Seat seat, List<OrderItem> itemsToBill) -> IssuedBill;
	   }
    	   IssuedBill 
	   {
	     freeTableAndSeats(Table table, Order order) [allItemsOrderedWereBilled()] -> Available; //FIX
	     createBill(Seat seat, List<OrderItem> itemsToBill) -> IssuedBill;
	     cancelBill(Table table, Seat seat) [tableHasMoreThanOneBillLeft(table)]-> IssuedBill;
		 cancelBill(Table table, Seat seat) [tableHasOneBillLeft(table)]-> ReadyToOrder;
		 addItemToOrderAndBillSeat(Seat seat, OrderItem itemToAdd) [seat.getBills().size()==0] -> IssuedBill;
       }
       
       createReservation(Table table, int numSeatsRequested, Date resTime, String contactName, String contactEmail, 
       	String contactPhone) [table.getCurrentSeats().size() >= numSeatsRequested] -> /{
       		List<Reservation> allRes = table.getReservations();
    			for(Reservation res: allRes) {
    				if(res.getDateTime()==resTime) {
    					return false;
    				}
    			}
       } InUse;
       cancelReservation(Table table, Date resTime) -> InUse;
       
     }
    
  }

  private boolean tableHasMoreThanOneBillLeft(Table table){
  	List<Seat> currSeats = table.getCurrentSeats();
	int numBillsForTable = 0;
	for(Seat s: currSeats) { //for every current seat at that table
		if(s.getBills().size() >0) { 
			numBillsForTable ++; //add up bills per seat if any
		}
	}
	return (numBillsForTable > 1);
  }
  private boolean tableHasOneBillLeft(Table table){
  	List<Seat> currSeats = table.getCurrentSeats();
	int numBillsForTable = 0;
	for(Seat s: currSeats) { //for every current seat at that table
		if(s.getBills().size() >0) { 
			numBillsForTable ++; //add up bills per seat if any
		}
	}
	return (numBillsForTable == 1);
  }
  private boolean allItemsOrderedWereBilled(){
  	return false;
  }
  private boolean setSeatInUse(Seat seat){
  //TODO: implement this in iteration 5
  	return false;
  }  
  private boolean setSeatAvailable(){
  //TODO: implement this in iteration 5
  	return false;
  }

}  